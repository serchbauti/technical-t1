from __future__ import annotations

from typing import Protocol, Iterable, Optional
from app.domain.entities.client import Client
from app.domain.entities.card import Card
from app.domain.entities.charge import Charge


class ClienteRepo(Protocol):
    async def create(self, c: Client) -> Client: ...
    async def get(self, id: str) -> Optional[Client]: ...
    async def update(self, c: Client) -> Client: ...
    async def delete(self, id: str) -> None: ...


class TarjetaRepo(Protocol):
    async def create(self, t: Card) -> Card: ...
    async def get(self, id: str) -> Optional<Card]: ...
    async def update(self, t: Card) -> Card: ...
    async def delete(self, id: str) -> None: ...


class ChargeRepo(Protocol):
    async def create(self, ch: Charge) -> Charge: ...
    async def get(self, id: str) -> Optional[Charge]: ...
    async def update(self, ch: Charge) -> Charge: ...
    async def find_by_cliente(self, cliente_id: str) -> Iterable[Charge]: ...
    async def get_by_request_id(self, request_id: str) -> Optional[Charge]: ...
